-- 1) List all users who have not made a purchase in the last 2 months.
-- USECASE: To send the customers some promotional emails so that they can come back to shopping
SELECT u.userid, u.firstname, u.lastname, u.email
FROM users u
WHERE u.userid NOT IN (
    SELECT o.userid
    FROM orders o
    WHERE o.orderdate >= NOW() - INTERVAL '2 months'
);

-- 2) Find users with a balance less than a specific amount for e.g.(1000)in their wallet.
-- USECASE: To send the customers message to add money to their wallet
SELECT userid, firstname, lastname, balance
FROM users
WHERE userid IN (
    SELECT userid
    FROM wallet
    WHERE balance < 1000
);

-- 3) Get the sellers and total number of their products.
SELECT u.userid AS seller_id, u.firstname AS seller_firstname, u.lastname AS seller_lastname,
       COUNT(p.productid) AS product_count
FROM users u
LEFT JOIN product p ON u.userid = p.sellerid
WHERE u.usertype = 'seller'
GROUP BY u.userid, u.firstname, u.lastname
ORDER BY u.userid;

--  4) To list all products that are out of stock for a particular seller
-- USECASE: Product management
SELECT *
FROM product
WHERE stockqty = 0 AND sellerid = 1;

-- 5) Display products in descending order of rating
-- USECASE: Will help all customers
SELECT p.productid, p.productname, p.description, p.price, p.stockqty,
       AVG(r.rating) AS average_rating
FROM product p
LEFT JOIN reviews r ON p.productid = r.productid
GROUP BY p.productid
ORDER BY average_rating DESC;

-- 6) List products with a price range (e.g., between $20 and $50).
-- USECASE: Will help customers to find pocket friendly products
SELECT *
FROM product
WHERE price BETWEEN 20.00 AND 50.00;

-- 7) Retrieve the top-selling products in the last month.
-- USECASE: will help sellers to manage stocks.
SELECT p.productid, p.productname, p.description, SUM(oi.quantity) AS total_sold
FROM product p
JOIN orderitem oi ON p.productid = oi.productid
JOIN orders o ON oi.orderid = o.orderid
WHERE o.orderdate >= CURRENT_DATE - INTERVAL '1 month'
GROUP BY p.productid
ORDER BY total_sold DESC
LIMIT 10; -- we can adjust the LIMIT to get more or fewer products

-- 8) Find the average order total for a specific time period.
-- (October 1, 2023, at midnight) till (October 31, 2023, at 11:59:59 PM)
-- USECASE: Will help flipkart to understand monthly stats
SELECT AVG(totalamt) AS average_order_total 
FROM orders
WHERE orderdate >= '2023-10-01 00:00:00' AND orderdate <= '2023-10-31 23:59:59';

-- 9) Retrieve orders with items purchased by a specific user.
SELECT o.orderid, o.orderdate, o.totalamt
FROM orders o
JOIN orderitem oi ON o.orderid = oi.orderid
WHERE o.userid = 1;

-- 10) List orders with a status of "shipped" but not "delivered."
-- USECASE: will help logistics team
SELECT *
FROM orders
WHERE shippingstatus = 'shipped' AND shippingstatus <> 'delivered';

-- 11) Find the total revenue generated by particular seller in the current year.
SELECT SUM(o.totalamt) AS total_revenue
FROM orders o
WHERE o.userid = 1
  AND EXTRACT(YEAR FROM o.orderdate) = EXTRACT(YEAR FROM CURRENT_DATE);


-- 12) List products with an average customer rating above a certain value.
SELECT p.productid, p.productname, p.description, p.price, p.stockqty,
       AVG(r.rating) AS average_rating
FROM product p
LEFT JOIN reviews r ON p.productid = r.productid
GROUP BY p.productid
HAVING AVG(r.rating) > 4;

-- 13) List customers who have never submitted a review.
-- USECASE: will help flipkart to send emails to users to give review
SELECT u.userid, u.firstname, u.lastname, u.email
FROM users u
WHERE u.userid NOT IN (
    SELECT DISTINCT userid
    FROM reviews
) AND u.usertype = 'customer';

-- 14) Retrieve the products in a user's wishlist and their prices.
SELECT wi.productid, p.productname, p.price
FROM wishlistitem wi
JOIN product p ON wi.productid = p.productid
WHERE wi.wishlistid = (
    SELECT wishlistid
    FROM wishlists
    WHERE userid = 1
);

-- 15) Find the most wishlisted products in the last month.
-- USECASE: Stock management
SELECT p.productid, p.productname, p.description, COUNT(wi.productid) AS wishlist_count
FROM product p
LEFT JOIN wishlistitem wi ON p.productid = wi.productid
WHERE wi.createdate >= NOW() - INTERVAL '1 month'
GROUP BY p.productid, p.productname, p.description
ORDER BY wishlist_count DESC;


-- 16) Find users with wishlists that are larger than a specific size.
SELECT u.userid, u.firstname, u.lastname
FROM users u
JOIN wishlists w ON u.userid = w.userid
GROUP BY u.userid
HAVING COUNT(w.wishlistid) > 5;

-- 17) List active coupons and their expiration dates
SELECT couponid, couponcode, discountpercentage, expirationdate
FROM coupon
WHERE expirationdate >= CURRENT_DATE;

-- 18) Find the coupons used by a specific user for a recent order.
SELECT c.couponid, c.couponcode, c.discountpercentage, c.expirationdate
FROM coupon c
JOIN orders o ON c.couponid = o.couponid
WHERE o.userid = :user_id
ORDER BY o.orderdate DESC
LIMIT 1;

-- 19) Retrieve the total discount applied using coupons in the last week.
SELECT SUM(c.discountpercentage) AS total_discount_applied
FROM coupon c
JOIN orders o ON c.couponid = o.couponid
WHERE o.orderdate >= NOW() - INTERVAL '1 week';

-- 20) List coupons used in orders with a total amount above a certain value.
SELECT c.couponid, c.couponcode, c.discountpercentage, c.expirationdate
FROM coupon c
JOIN orders o ON c.couponid = o.couponid
WHERE o.totalamt > 1000;

-- 21) Retrieve the addresses for a specific user, including city and state.
SELECT a.street, a.city, a.state
FROM addresses a
JOIN users u ON a.addressid = u.addressid
WHERE u.userid = 1;

-- 22) List users with multiple shipping addresses.
SELECT u.userid, u.firstname, u.lastname, u.email, COUNT(a.addressid) AS address_count
FROM users u
JOIN addresses a ON u.userid = a.userid
GROUP BY u.userid, u.firstname, u.lastname, u.email
HAVING COUNT(a.addressid) > 1;

-- 23) Find the most common state for shipping addresses.
SELECT state, COUNT(state) AS state_count
FROM addresses
GROUP BY state
ORDER BY state_count DESC
LIMIT 1;

-- 24) Retrieve the most commonly used payment type on the website.
SELECT paymenttype, COUNT(paymenttype) AS payment_count
FROM paymentsmethod
GROUP BY paymenttype
ORDER BY payment_count DESC
LIMIT 1;

-- 25) Find the payment methods used for high-value orders.
SELECT pm.paymenttype, o.totalamt
FROM paymentsmethod pm
JOIN orders o ON pm.userid = o.userid
WHERE o.totalamt >= 5000;

-- 26)  Retrieve the shipment details for a specific order, including estimated and actual delivery dates.
SELECT s.shipmentid, s.estimateddeliverydate, s.actualdeliverydate, s.shippingstatus
FROM shipment s
WHERE s.orderid = 1;


-- 27) List orders with shipments that are overdue.
SELECT o.orderid, o.userid, o.orderdate, o.totalamt, s.shipmentid, s.estimateddeliverydate, s.actualdeliverydate
FROM orders o
JOIN shipment s ON o.orderid = s.orderid
WHERE s.actualdeliverydate > s.estimateddeliverydate;

-- 28) Find the delivery person for a specific order.
SELECT u.userid, u.firstname, u.lastname
FROM users u
JOIN shipment s ON u.userid = s.deliverypersonID
WHERE s.orderid = 1;

-- 29) List shipments for orders delivered in the last week.
SELECT s.shipmentid, s.orderid, s.estimateddeliverydate, s.actualdeliverydate, s.shippingstatus, s.deliverypersonID
FROM shipment s
WHERE s.actualdeliverydate >= NOW() - INTERVAL '1 week';

-- 30) Retrieve the top 10 products that have received the most reviews, along with their average ratings:
SELECT p.productid, p.productname, COUNT(r.reviewid) AS review_count, AVG(r.rating) AS average_rating
FROM product p
LEFT JOIN reviews r ON p.productid = r.productid
GROUP BY p.productid, p.productname
ORDER BY review_count DESC
LIMIT 10;
